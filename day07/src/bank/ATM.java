package bank;
//
//import java.util.Random;
//import java.util.Scanner;
//
////[1][1].name -> 고객이름
//							//Worri.신재민 //클래스배열로 해야한다.
//class BigBank{
//BigBank[][]DB=new BigBank[3][100];	
//	
//	Scanner sc=new Scanner(System.in);
//	Random r=new Random();
//	
//	String holder;
//	int account;
//	int cellNum;
//	int passWord;
//	int balance;
//	
//}
//
//class Bank extends BigBank{
//	BigBank bank1[]=new bank1[];
//}	

//3개의 은행 클래스 선언
//- 1번 은행 : 잔액 조회 시 재산 반토막
//- 2번 은행 : 출금 시 수수료 50%
//- 3번 은행 : 입금 시 수수료 50%

//Bank[][] DB = new Bank[3][100]; //배열명 대문자 x 소문자 o

//모든 은행을 관리할 부모 클래스 선언 // 300명의 정보가 담김(1은행 100명)
//- 모든 은행의 고객을 관리하는 저장소(DB) 선언 (2차원 배열?) (1차원 배열 3행 100열) 2차원 배열 초기값 null 계좌 개설한 후 null에 집어넣는다
//- 예금주, 계좌, 핸드폰번호, 비밀번호, 잔액***
//- 계좌번호 중복검사
//- 핸드폰 중복검사(핸드폰 번호를 매개변수로 받은 후 DB에서 검사)
//- 로그인(계좌번호와 비밀번호)
//- 입금
//- 출금(잔액검사)
//- 잔액조회

public class ATM {
	public static void main(String[] args) {
		//은행 선택
		//1. 1번 은행
		//2. 2번 은행
		//3. 3번 은행 (4. 나가기)
		
		//메인 메뉴
		//1. 계좌 개설
		// - 6자리 랜덤 계좌번호
		// - 기존 고객의 계좌번호와 중복이 없는 번호로 개설해야 한다.
		// - 핸드폰 번호는 숫자만 입력하도록 하고, 문자가 포함되면 안되며, 0~9사이의 정수여야 한다.
		// - 비밀번호는 4자리로만 입력하도록 한다.
		
		//2. 입금하기
		// - 로그인(계좌번호, 비밀번호)
		// - 계좌를 개설한 은행에서만 입금 가능
		
		//3. 출금하기
		// - 로그인(계좌번호, 비밀번호)
		
		//4. 잔액조회
		// - 로그인(계좌번호, 비밀번호)
		
		//5. 계좌번호 찾기
		// - 휴대폰 번호, 비밀번호 입력
		// - 새로운 계좌번호 부여
		
		//선택★ 6. 계좌내역(거래내역) - 연결(+=)
		// - 계좌번호, 예금주, 입금인지 출금인지, 입금액 또는 출금액, 현재 잔액 출력
		// - 만약 계좌번호 변경 시 이전 거래 내역에서 계좌번호를 신규 계좌번호로 수정(split())
		
		//7. 나가기(은행 다시 선택)
	}	
	
	

}
